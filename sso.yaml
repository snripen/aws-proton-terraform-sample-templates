Resources:
  AMGVPC9869460B:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/Resource
  AMGVPCPublicSubnet1SubnetF68429C7:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: AMGVPC9869460B
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet1/Subnet
  AMGVPCPublicSubnet1RouteTable7EC2C1FB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: AMGVPC9869460B
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet1/RouteTable
  AMGVPCPublicSubnet1RouteTableAssociationFCD9C214:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AMGVPCPublicSubnet1RouteTable7EC2C1FB
      SubnetId:
        Ref: AMGVPCPublicSubnet1SubnetF68429C7
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet1/RouteTableAssociation
  AMGVPCPublicSubnet1DefaultRoute2629A016:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AMGVPCPublicSubnet1RouteTable7EC2C1FB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: AMGVPCIGWE6C748B7
    DependsOn:
      - AMGVPCVPCGW4E0FD1D1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet1/DefaultRoute
  AMGVPCPublicSubnet1EIPDF4B28D0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet1/EIP
  AMGVPCPublicSubnet1NATGateway5813684A:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: AMGVPCPublicSubnet1SubnetF68429C7
      AllocationId:
        Fn::GetAtt:
          - AMGVPCPublicSubnet1EIPDF4B28D0
          - AllocationId
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet1/NATGateway
  AMGVPCPublicSubnet2Subnet179CE4BC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: AMGVPC9869460B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet2/Subnet
  AMGVPCPublicSubnet2RouteTableCA18621F:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: AMGVPC9869460B
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet2/RouteTable
  AMGVPCPublicSubnet2RouteTableAssociation7D9EC375:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AMGVPCPublicSubnet2RouteTableCA18621F
      SubnetId:
        Ref: AMGVPCPublicSubnet2Subnet179CE4BC
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet2/RouteTableAssociation
  AMGVPCPublicSubnet2DefaultRouteA2F1809D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AMGVPCPublicSubnet2RouteTableCA18621F
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: AMGVPCIGWE6C748B7
    DependsOn:
      - AMGVPCVPCGW4E0FD1D1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet2/DefaultRoute
  AMGVPCPublicSubnet2EIPC0DFD5D8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet2/EIP
  AMGVPCPublicSubnet2NATGatewayFBE03EE3:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: AMGVPCPublicSubnet2Subnet179CE4BC
      AllocationId:
        Fn::GetAtt:
          - AMGVPCPublicSubnet2EIPC0DFD5D8
          - AllocationId
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PublicSubnet2/NATGateway
  AMGVPCPrivateSubnet1SubnetEB26D2BF:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: AMGVPC9869460B
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet1/Subnet
  AMGVPCPrivateSubnet1RouteTable903C4046:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: AMGVPC9869460B
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet1/RouteTable
  AMGVPCPrivateSubnet1RouteTableAssociationE1C89B5C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AMGVPCPrivateSubnet1RouteTable903C4046
      SubnetId:
        Ref: AMGVPCPrivateSubnet1SubnetEB26D2BF
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet1/RouteTableAssociation
  AMGVPCPrivateSubnet1DefaultRoute6A4B2552:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AMGVPCPrivateSubnet1RouteTable903C4046
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: AMGVPCPublicSubnet1NATGateway5813684A
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet1/DefaultRoute
  AMGVPCPrivateSubnet2Subnet012C5B98:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: AMGVPC9869460B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet2/Subnet
  AMGVPCPrivateSubnet2RouteTable08AEF98D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: AMGVPC9869460B
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet2/RouteTable
  AMGVPCPrivateSubnet2RouteTableAssociationE6118BDD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AMGVPCPrivateSubnet2RouteTable08AEF98D
      SubnetId:
        Ref: AMGVPCPrivateSubnet2Subnet012C5B98
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet2/RouteTableAssociation
  AMGVPCPrivateSubnet2DefaultRoute02EFD069:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AMGVPCPrivateSubnet2RouteTable08AEF98D
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: AMGVPCPublicSubnet2NATGatewayFBE03EE3
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/PrivateSubnet2/DefaultRoute
  AMGVPCIGWE6C748B7:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/AMG-VPC
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/IGW
  AMGVPCVPCGW4E0FD1D1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: AMGVPC9869460B
      InternetGatewayId:
        Ref: AMGVPCIGWE6C748B7
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AMG-VPC/VPCGW
  LambdaRoleC149CD95:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: grafana-lambda-policy
      RoleName: lambda_role
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/Lambda-Role/Resource
  EC2Role24AC9335:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSGrafanaConsoleReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - grafana:UpdateWorkspaceAuthentication
                  - grafana:UpdateWorkspace
                  - ec2:Describe*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: keycloak-ec2-policy
      RoleName: ec2_role
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/EC2-Role/Resource
  GrafanaRoleF8413940:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: grafana.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSXrayReadOnlyAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AWSIoTSiteWiseReadOnlyAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonTimestreamReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sns:Publish
                  - aps:ListWorkspaces
                  - aps:DescribeWorkspace
                  - aps:QueryMetrics
                  - aps:GetLabels
                  - aps:GetSeries
                  - aps:GetMetricMetadata
                  - cloudwatch:DescribeAlarmsForMetric
                  - cloudwatch:DescribeAlarmHistory
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:GetMetricData
                  - logs:DescribeLogGroups
                  - logs:GetLogGroupFields
                  - logs:StartQuery
                  - logs:StopQuery
                  - logs:GetQueryResults
                  - logs:GetLogEvents
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - tag:GetResources
                  - es:ESHttpGet
                  - es:DescribeElasticsearchDomains
                  - es:ListDomainNames
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: grafana-policy
      RoleName: Grafana-Role
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/Grafana-Role/Resource
  managedgrafanaworkspaceCustomResourcePolicy74187F4D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: grafana:CreateWorkspace
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: managedgrafanaworkspaceCustomResourcePolicy74187F4D
      Roles:
        - Ref: LambdaRoleC149CD95
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/managed-grafana-workspace/CustomResourcePolicy/Resource
  managedgrafanaworkspaceE715D4B6:
    Type: Custom::AWS
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd22872D164C4C
          - Arn
      Create:
        Fn::Join:
          - ""
          - - '{"action":"createWorkspace","service":"Grafana","parameters":{"accountAccessType":"CURRENT_ACCOUNT","authenticationProviders":["SAML"],"permissionType":"SERVICE_MANAGED","workspaceDataSources":["PROMETHEUS","XRAY","TIMESTREAM","SITEWISE","AMAZON_OPENSEARCH_SERVICE","CLOUDWATCH"],"workspaceName":"AMG-WORKSPACE","workspaceNotificationDestinations":["SNS"],"workspaceRoleArn":"'
            - Fn::GetAtt:
                - GrafanaRoleF8413940
                - Arn
            - '"},"physicalResourceId":{"id":"AmgCustomResource"}}'
      InstallLatestAwsSdk: true
    DependsOn:
      - managedgrafanaworkspaceCustomResourcePolicy74187F4D
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/managed-grafana-workspace/Resource/Default
  AWS679f53fac002430cb0da5b7982bd22872D164C4C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 4a575666d1c2c6412590d2a56f328e040a81ad1ef59aecee31ae9b393d05f659.zip
      Role:
        Fn::GetAtt:
          - LambdaRoleC149CD95
          - Arn
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 120
    DependsOn:
      - LambdaRoleC149CD95
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/AWS679f53fac002430cb0da5b7982bd2287/Resource
      aws:asset:path: asset.4a575666d1c2c6412590d2a56f328e040a81ad1ef59aecee31ae9b393d05f659
      aws:asset:is-bundled: false
      aws:asset:property: Code
  KeycloakSecurityGroup3B33651E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ManagedGrafanaStack/Keycloak-Security-Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: AMGVPC9869460B
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/Keycloak-Security-Group/Resource
  KeycloakInstanceInstanceProfileB81FA2F6:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2Role24AC9335
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/Keycloak-Instance/InstanceProfile
  KeycloakInstance31F59FA2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: KeycloakInstanceInstanceProfileB81FA2F6
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.small
      SecurityGroupIds:
        - Fn::GetAtt:
            - KeycloakSecurityGroup3B33651E
            - GroupId
      SubnetId:
        Ref: AMGVPCPublicSubnet1SubnetF68429C7
      Tags:
        - Key: Name
          Value: ManagedGrafanaStack/Keycloak-Instance
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          #!/bin/sh
          export PATH=/usr/local/bin:$PATH;

          # Install docker and docker-compose
          yum update
          yum install docker jq -y
          service docker start
          usermod -a -G docker ec2-user
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          chown root:docker /usr/local/bin/docker-compose

          # Update aws-cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          pip3 install --upgrade --user awscli
          echo 'export PATH=$HOME/.local/bin:$PATH' | tee -a ~/.bashrc && source ~/.bashrc

          # Set default aws region
          export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
          aws configure set default.region ${AWS_REGION}
          aws configure get default.region

          # Get grafana endpoint
          export GRAFANA_URL=$(aws grafana list-workspaces | jq -r '.workspaces | .[] | select(.name == "AMG-WORKSPACE") | .endpoint')
          export GRAFANA_ID=$(aws grafana list-workspaces | jq -r '.workspaces | .[] | select(.name == "AMG-WORKSPACE") | .id')
          export KEYCLOAK_URL=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

          # Create docker-compose file
          cat <<EOF >/home/ec2-user/docker-compose.yml
          version: '3'

          volumes:
            postgres_data:
                driver: local

          services:
            postgres:
                image: postgres
                container_name: postgres
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                environment:
                  POSTGRES_DB: keycloak
                  POSTGRES_USER: keycloak
                  POSTGRES_PASSWORD: password
            keycloak:
                image: quay.io/keycloak/keycloak:legacy
                container_name: keycloak
                environment:
                  DB_VENDOR: POSTGRES
                  DB_ADDR: postgres
                  DB_DATABASE: keycloak
                  DB_USER: keycloak
                  DB_SCHEMA: public
                  DB_PASSWORD: password
                  KEYCLOAK_USER: admin
                  KEYCLOAK_PASSWORD: Pa55w0rd
                  JDBC_PARAMS: "ssl=false"
                ports:
                  - 80:8080
                depends_on:
                  - postgres
          EOF

          chown ec2-user:ec2-user /home/ec2-user/docker-compose.yml
          /usr/local/bin/docker-compose -f /home/ec2-user/docker-compose.yml up -d

          cat << EOF > configure.sh
          ./opt/jboss/keycloak/bin/kcadm.sh config credentials \
              --server http://localhost:8080/auth \
              --realm master \
              --user admin \
              --password Pa55w0rd

          ./opt/jboss/keycloak/bin/kcadm.sh update realms/master -s sslRequired=NONE
          ./opt/jboss/keycloak/bin/kcadm.sh create realms -f - << END
          {
              "realm": "eksdemo",
              "enabled": true,
              "roles": {
              "realm": [
                  {
                  "name": "admin"
                  }
              ]
              },
              "sslRequired": "none",
              "users": [
              {
                  "username": "admin",
                  "email": "admin@eksdemo",
                  "enabled": true,
                  "firstName": "Admin",
                  "realmRoles": [
                  "admin"
                  ],
                  "credentials": [
                  {
                      "type": "password",
                      "value": "Pa55w0rd"
                  }
                  ]
              }
              ],
              "clients": [
              {
                  "clientId": "https://${GRAFANA_URL}/saml/metadata",
                  "name": "amazon-managed-grafana",
                  "enabled": true,
                  "protocol": "saml",
                  "adminUrl": "https://${GRAFANA_URL}/login/saml",
                  "redirectUris": [
                  "https://${GRAFANA_URL}/saml/acs"
                  ],
                  "attributes": {
                  "saml.authnstatement": "true",
                  "saml.server.signature": "true",
                  "saml_name_id_format": "email",
                  "saml_force_name_id_format": "true",
                  "saml.assertion.signature": "true",
                  "saml.client.signature": "false"
                  },
                  "defaultClientScopes": [],
                  "protocolMappers": [
                  {
                      "name": "name",
                      "protocol": "saml",
                      "protocolMapper": "saml-user-property-mapper",
                      "consentRequired": false,
                      "config": {
                      "attribute.nameformat": "Unspecified",
                      "user.attribute": "firstName",
                      "attribute.name": "displayName"
                      }
                  },
                  {
                      "name": "email",
                      "protocol": "saml",
                      "protocolMapper": "saml-user-property-mapper",
                      "consentRequired": false,
                      "config": {
                      "attribute.nameformat": "Unspecified",
                      "user.attribute": "email",
                      "attribute.name": "mail"
                      }
                  },
                  {
                      "name": "role list",
                      "protocol": "saml",
                      "protocolMapper": "saml-role-list-mapper",
                      "config": {
                      "single": "true",
                      "attribute.nameformat": "Unspecified",
                      "attribute.name": "role"
                      }
                  }
                  ]
              }
              ]
          }
          END
          EOF

          sleep 75
          docker exec  -i  keycloak  /bin/sh  <  configure.sh

          aws grafana update-workspace-authentication \
              --workspace-id ${GRAFANA_ID} \
              --authentication-providers '["SAML"]' \
              --saml-configuration "{\"idpMetadata\": {\"url\": \"http://${KEYCLOAK_URL}/auth/realms/eksdemo/protocol/saml/descriptor\"}, \"assertionAttributes\": {\"role\": \"role\"}, \"roleValues\": {\"admin\": [\"admin\"]}}"
    DependsOn:
      - EC2Role24AC9335
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/Keycloak-Instance/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/11RwW7CMAz9Fu4hY3DZjlANxGWK2okrcoOBjDZBiTOEKv59bkpbbSe/9/TsPDtz+SZnE7iFqT5cppUpZVMQ6Itgad+gnstmd9UiO9qdyoSKZWV0EUuL1Gojyl0k/IKywlEftWUIThsg4+xgbsHHVrXlE2gDhDe4C+XND8Nx8NYSesa9oUvyZEvirOcaLYkCdfSG7hvv4jVl+CNsbSCwGruRHX4IA7VscteFTlU5XjC9MqLer7w7morbKqjLA/CljD1VSM6uo9VpuQFwW48fIiz2EAJSkMu2MJerqC9IKwg8LsfgoudsOgZy9d4/OdtvIUvaYPlPOXaP02z+vBOnSguAhxr5ei3JnD2YLo2609nZl4V8l6+zyXcwZuqjJVOjzLv6C9lQG8gVAgAA
    Metadata:
      aws:cdk:path: ManagedGrafanaStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

